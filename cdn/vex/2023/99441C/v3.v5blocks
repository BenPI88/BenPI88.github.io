{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable><variable id=\"SgelpY}=2WIn.wHaB1(G\">claw</variable><variable id=\"Ama.vk{O.,1;mwf4]LfP\">driver</variable></variables><comment id=\"]I7Y!mQ4k4WE|UB`Xexe\" x=\"726\" y=\"-7\" h=\"100\" w=\"100\">Made for Pixelated Oranges!</comment><block type=\"v5_events_when_autonomous\" id=\";LbIZpi!*W6K%1p2jb,~\" x=\"-150\" y=\"110\"><next><block type=\"v5_variables_set_variable\" id=\"_Q+}.(auOZ{0E0iq[S5}\"><field name=\"VARIABLE\" id=\"Ama.vk{O.,1;mwf4]LfP\">driver</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"eY4_-,[qawZAbDu.MHh(\"><field name=\"NUM\">0</field></shadow></value></block></next></block><block type=\"v5_events_when_started\" id=\"2I]F?v+6YA?!-p/+[~Nq\" x=\"530\" y=\"110\"><next><block type=\"v5_control_forever\" id=\"T@|05B]kCJ1.2E-r/rPK\"><statement name=\"SUBSTACK\"><block type=\"v5_control_if_then_else\" id=\"Jlk2[zOynA4c`yH`K@ZZ\"><value name=\"CONDITION\"><block type=\"v5_operator_equal_to\" id=\"U~OKtO3.%Ve3UFXY](/S\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"[x=ZRgL)l9yNQ9zuSS;_\"><field name=\"NUM\">0</field></shadow><block type=\"v5_variables_variable\" id=\"tB%AW$vqdjfx=g-Tb/;e\"><field name=\"VARIABLE\" id=\"SgelpY}=2WIn.wHaB1(G\">claw</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"HjfDy:3ZLja8{q6y;Q%e\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_set_motor_position\" id=\"!W-v7i._.zz14;:8@e8J\"><field name=\"MOTOR\">Claw</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\";PP`F;;)EgWj?A%N/rx`\"><field name=\"NUM\">0</field></shadow></value></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_motion_set_motor_position\" id=\"rCI}au/x;XKUkS;fs2Vq\"><field name=\"MOTOR\">Claw</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\"vV-%jy:kAmV0v`16BCUM\"><field name=\"NUM\">45</field></shadow></value></block></statement></block></statement></block></next></block><block type=\"v5_events_when_driver\" id=\"=pR`yUvZ$dvs$nO?^ggs\" x=\"250\" y=\"230\"><next><block type=\"v5_variables_set_variable\" id=\"[,4^yee+h|s7YU.gH3fL\"><field name=\"VARIABLE\" id=\"Ama.vk{O.,1;mwf4]LfP\">driver</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"{EqR|zY:4dTa.b!6!KJm\"><field name=\"NUM\">1</field></shadow></value></block></next></block><block type=\"v5_events_when_started\" id=\"]xtP00@~MWPv$j7s(qq;\" x=\"-205\" y=\"369\"><next><block type=\"v5_control_forever\" id=\"ZWL{;xEIoER=!6n.{7)o\"><statement name=\"SUBSTACK\"><block type=\"v5_control_if_then_else\" id=\"`LL:52@T+1uci(9c9GS|\"><value name=\"CONDITION\"><block type=\"v5_operator_equal_to\" id=\"1++{6esb|MnsAG1EYDQ9\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"@zAX=MO^Xr?|#-LM)nqu\"><field name=\"NUM\">0</field></shadow><block type=\"v5_variables_variable\" id=\"q[vMM4~Qm:o=m.XH|;X5\"><field name=\"VARIABLE\" id=\"Ama.vk{O.,1;mwf4]LfP\">driver</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"SNf}V9NJrM-TdAsmTCr{\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_sensing_controller_is_enabled\" id=\"E{_K!M?a9}.:{,QH9UPp\"><field name=\"isEnabled\">true</field><next><block type=\"v5_control_if_then_else\" id=\"MnMuqvQ8g;7/^F`QNi^)\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"*O9KEA{H)Ofh2/VA3rfk\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR2</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_variables_set_variable\" id=\":ZjY(|qJ_$Ss9PKTBXAB\"><field name=\"VARIABLE\" id=\"SgelpY}=2WIn.wHaB1(G\">claw</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"p`G8k`%F%v6Du@/;7[)-\"><field name=\"NUM\">1</field></shadow></value></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_variables_set_variable\" id=\"J)pL`s%$fO6B=@/amlq+\"><field name=\"VARIABLE\" id=\"SgelpY}=2WIn.wHaB1(G\">claw</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"_),jsUF~lj?Dd4NP,}63\"><field name=\"NUM\">0</field></shadow></value></block></statement></block></next></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_sensing_controller_is_enabled\" id=\"VJ[gaITD^*!{f28dTXBM\"><field name=\"isEnabled\">false</field></block></statement></block></statement></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[1,2,3,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[20],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT2, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT3, ratio18_1, true);\nmotor rightMotorB = motor(PORT4, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor Claw = motor(PORT20, ratio18_1, false);\n\n\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis4\n      // right = Axis3 - Axis4\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis4.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis4.position();\n      \n      // check if the values are inside of the deadband range\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\n        // check if the motors have already been stopped\n        if (DrivetrainNeedsToBeStopped_Controller1) {\n          // stop the drive motors\n          LeftDriveSmart.stop();\n          RightDriveSmart.stop();\n          // tell the code that the motors have been stopped\n          DrivetrainNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\n        DrivetrainNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable, claw, driver;\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  driver = 0.0;\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  while (true) {\n    if (claw == 1.0) {\n      Claw.setPosition(0.0, degrees);\n    }\n    else {\n      Claw.setPosition(45.0, degrees);\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  driver = 1.0;\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  while (true) {\n    if (driver == 1.0) {\n      RemoteControlCodeEnabled = true;\n      if (Controller1.ButtonR2.pressing()) {\n        claw = 1.0;\n      }\n      else {\n        claw = 0.0;\n      }\n    }\n    else {\n      RemoteControlCodeEnabled = false;\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}